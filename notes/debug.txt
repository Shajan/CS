# Snooze mesos health checks
touch .healthchecksnooze

a.hprof Java/JVM thread/call-stack that uses most cpu
	Using top in conjunction with jstack, you can locate which threads are using up the majority of your CPU in production. Run `top` press 'H' (for LWP/thread view), 'c' (to show the full command view), and 'P' (to order by process), and found the 2 offending threads. I then ran `jstack <java_pid>` and found the native thread IDs that corresponded to the LWP IDs from top (you have to convert them to hex).
	Use htop instead of top to find thread id

ps aux | egrep <process_name> | egrep -v egrep | awk '{ print "cat /proc/" $2 "/status" }' | bash
ps aux | egrep <process_name> | egrep -v egrep | awk '{ print "jstack -l " $2 }' | bash
ps aux | egrep ^[<group_id>]| egrep java | egrep -v egrep | egrep -v bash | awk '{ print "jmap -histo:live " $2 }' | bash
ps aux | egrep <app.jar> | egrep -v 'bash|python|egrep' | awk '{ print "jmap -histo:live " $2 }' | bash
ps aux | egrep <app.jar> | egrep -v 'bash|python|egrep' | awk '{ print "jstack -l " $2 }' | bash

#Paging : majflt/s #of per second, those which have required loading a memory page from disk.
sar -B 1 10

ps aux | egrep <group_id> | egrep -v egrep | awk '{ print "ps -o maj_flt " $2 } ' | bash
ps aux | egrep ^<group_id> | egrep java | egrep -v egrep | egrep -v bash | awk '{ print "gcore " $2 }' | bash

#Generate core dump
gcore pid

#Print stack from core dump
#http://web.mit.edu/gnu/doc/html/gdb_8.html#SEC42
gdb /usr/lib/jvm/java-1.8.0-twitter/bin/java <PID>
# to continue execution on attach
gdb /usr/lib/jvm/java-1.8.0-twitter/bin/java <PID> -ex cont
  handle SIGSEGV print nostop
  set logging on
gdb /usr/lib/jvm/java-1.8.0-twitter/bin/java core.dump
gdb --core=core.dump
	thread apply all bt
	info threads
	thread XX
		bt
	frame XX 
		info frame
		info args|locals|catch

# examine memory
x <address>
x/g <address> # giant word

# disassemble
disass

# Common commands in gdb
gdb -p <pid> [OR gdb command, attach <pid>]
c # continue
info locals
detach <pid>

# After a fork, debug the child or parent process?
set follow-fork-mode [child|parent]
set detach-on-fork off # debug both child and parent

# Threads
catch syscall clone
break pthread_exit

# Break points
catch [throw]
info break
delete [num]

# Stack
bt
bt n [innermost n frames]
bt -n [outermost n frames]

#http://docs.oracle.com/javase/7/docs/technotes/tools/
JVM tools

#http://docs.oracle.com/javase/7/docs/technotes/tools/share/jstack.html
jstack -m -l /usr/lib/jvm/java-11-twitter/bin/java core.dump 

#/usr/lib/jvm/java-11-twitter/bin/java

jdb -listconnectors [to see what is supported]
jdb -connect sun.jvm.hotspot.jdi.SACoreAttachingConnector:javaExecutable=/usr/lib/jvm/java-11-twitter/bin/java,core=./core
	where all
	wherei all
	threads
	thread XX
	locals [print local variables]
	up XX, down XX [to jump frames]

https://confluence.twitter.biz/display/~alambert/Frequently+answered+questions

/usr/lib/jvm/java-11-twitter/bin/java/jdb -connect com.sun.jdi.ProcessAttach:pid=<pid>
  print <full expression>

/usr/lib/jvm/java-11-twitter/bin/java/jdb -connect sun.jvm.hotspot.jdi.SAPIDAttachingConnector:pid=<pid>
	threads:w

Launch mesos process with the added commandline
  -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address={{thermos.ports[debug]}}
Then attach debugger to mesos debug port
  /usr/lib/jvm/java-1.8.0-twitter/bin/jdb -attach 0:<debug-port>

#http://docs.oracle.com/javase/7/docs/technotes/tools/share/jmap.html
java "-agentlib:hprof=cpu=samples,interval=10,depth=128,file=log/hprof.txt"
java "-agentlib:hprof=cpu=samples,interval=10,depth=128,file=log/hprof.bin,format=b"
jmap -histo /usr/lib/jvm/java-1.8.0-twitter/bin/java core.dump
jmap -dump:format=b,file=/tmp/core /usr/lib/jvm/java-1.8.0-twitter/bin/java core.dump

#To see objects and in GC heap and traverse them
jmap -dump:format=b,file=core.hprof <pid>
jvisualvm core.hprof

jhat /tmp/core [creates http server on port 7000]
jhat /tmp/a.hprof [creates http server on port 7000]
ssh nest2.twitter.biz -L7000:smf1-cox-10-sr1:7000 -N -o ExitOnForwardFailure=yes
http://localhost:7000/ 
	https://blogs.oracle.com/sundararajan/entry/querying_java_heap_with_oql
	http://visualvm.java.net/oqlhelp.html
	To compare two coredumps, use '-baseline first-coredump'
	jconsole [Appears not to work]
#to see which port is open by jhat
netstat --all --program | egrep jhat

#linux Network delay/loss emulator
http://www.linuxfoundation.org/collaborate/workgroups/networking/netem

#MAC 
java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=7000
jdb -attach 7000
/opt/local/bin/gdb-apple /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java [PID|dump]
ggdb /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java [PID|dump]
	info signals
	catch signal 'all'

lldb -c core.XX
	bt
	bt all

#Mac list pid using a port
lsof -n -i4TCP:9990
fs_usage : To see file activity - like filemon
	sudo fs_usage -w -f mode="network" PID
Activity Monitor
#For Crash dumps
	sudo launchctl limit core unlimited
	ulimit -c unlimited

#Linux, list files open by process (including open ports)
sudo lsof -Pan -p <pid>

#trace file system calls (open,stat,chmod,unlink) linux
sudo strace -p <pid>  -e trace=open,stat,chmod,unlink -f
sudo strace -p <pid>  -c # prints stats

#find proesses accessing a folder/file
lsof | egrep <path>
lsof +f -- /dev/sdb1

#netstat
netstat -na
sudo netstat --all --program 
lsof

#network activity, find pricess using too much network
sudo iftop
sudo iftop -B -i eth0
	Press 1 2 or 3 column you want to sort; Find remote host, then to find process
        sudo netstat -tup | egrep <host>

#Linux version
uname -mrs

#Linux trace system calls
strace <executable>
strace -p <pid> [-f]

#Linux trace individual request on disk driver's queue
blkparse

#Linux I/O statistics 
iostat

#Linux network I/O
tcpdump or Wireshark

#Listy dynamic dependencies (http://www.cyberciti.biz/tips/linux-shared-library-management.html)
ldd <binary>

#find a class in set of jars
find . -name "*.jar" -exec grep -Hsli "com/foo/bar/Baz" {} \;
OR
for i in *.jar; do jar -tvf "$i" | grep -Hsi "com/foo/bar/Baz"; done

TODO
pprof https://github.com/mariusae/heapster/blob/master/README.md

#core dumps
file <path to core dump> #Find executable that created core dump
strings <path to core dump> #Wild guess

#find process that has too many files open
for proc in $(ls /proc | egrep -o '[0-9]*') ; do echo "$(ls -l $proc/fd | wc -l) : $proc"; done | sort -nr | head -n 20


############################################
## jdb connectors available on twitter JVM
############################################
  Connector: com.sun.jdi.CommandLineLaunch  Transport: dt_socket
    description: Launches target using Sun Java VM command line and attaches to it

    Argument: home Default value: /usr/lib/jvm/java-1.8.0-twitter/jre
    description: Home directory of the SDK or runtime environment used to launch the application

    Argument: options (no default)
    description: Launched VM options

    Required Argument: main (no default)
    description: Main class and arguments, or if -jar is an option, the main jar file and arguments

    Argument: suspend Default value: true
    description: All threads will be suspended before execution of main

    Required Argument: quote Default value: "
    description: Character used to combine space-delimited text into a single command line argument

    Required Argument: vmexec Default value: java
    description: Name of the Java VM launcher

  Connector: com.sun.jdi.RawCommandLineLaunch  Transport: dt_socket
    description: Launches target using user-specified command line and attaches to it

    Required Argument: command (no default)
    description: Raw command to start the debugged application VM

    Required Argument: quote Default value: "
    description: Character used to combine space-delimited text into a single command line argument

    Required Argument: address (no default)
    description: Address from which to listen for a connection after the raw command is run

  Connector: com.sun.jdi.SocketAttach  Transport: dt_socket
    description: Attaches by socket to other VMs

    Argument: timeout (no default)
    description: Timeout while waiting to attach 

    Argument: hostname Default value: atla-evz-19-sr1.prod.twttr.net
    description: Machine name to which to attach for VM connections

    Required Argument: port (no default)
    description: Port number to which to attach for VM connections

  Connector: com.sun.jdi.SocketListen  Transport: dt_socket
    description: Accepts socket connections initiated by other VMs

    Argument: timeout (no default)
    description: Timeout while waiting for connection

    Argument: port (no default)
    description: Port number at which to listen for VM connections

    Argument: localAddress (no default)
    description: Local address that the listener binds to

  Connector: com.sun.jdi.ProcessAttach  Transport: local
    description: Attaches to debuggee by process-id (pid)

    Required Argument: pid (no default)
    description: pid

    Argument: timeout (no default)
    description: Timeout while waiting to attach 

  Connector: sun.jvm.hotspot.jdi.SACoreAttachingConnector  Transport: filesystem
    description: This connector allows you to attach to a core file using the Serviceability Agent

    Required Argument: javaExecutable (no default)
    description: Pathname of Java Executable

    Argument: core Default value: core
    description: Pathname of a corefile from a Java Process

  Connector: sun.jvm.hotspot.jdi.SADebugServerAttachingConnector  Transport: RMI
    description: This connector allows you to attach to a Java Process via a debug server with the Serviceability Agent

    Required Argument: debugServerName (no default)
    description: Name of a remote SA Debug Server

  Connector: sun.jvm.hotspot.jdi.SAPIDAttachingConnector  Transport: local process
    description: This connector allows you to attach to a Java process using the Serviceability Agent

    Required Argument: pid (no default)
    description: PID of a Java process
############################################
