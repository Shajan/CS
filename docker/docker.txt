# Concepts 
Image (readonly, can be instantiated to form a container)
Container (Running instance of an Image, has state) 
Volume (Keep data here that needs to be shared across containers, mount volume in container)
Dockerfile (definition of how to instantiate a container)

# How to get images from (available in https://hub.docker.com/)
docker pull <image-name>

# list of static images
docker image ls
docker images
docker images -a  # shows everything

# list of containers (uses an image to get started)
docker ps # running containers
docker ps -a # list of all containers including stopped ones

# start a container from image
docker run image_name:tag_name pwd

# copy files from/to container
docker cp foo.txt mycontainer:/foo.txt
docker cp mycontainer:/foo.txt foo.txt

# start a docker image
docker start <image-name>

# get a shell
docker exec -it <image-name> /bin/bash

# new image from commit id
docker commit <commit-id> <image-name:tag>

# Tensorflow
# https://www.tensorflow.org/install/docker
# https://hub.docker.com/r/tensorflow/tensorflow
docker run -it tensorflow/tensorflow bash

################## Cleaning up

# stop a container
docker stop <container-name>

# stop all containers
docker stop $(docker ps -a -q)

# force stop all containers
docker kill $(docker ps -q)

# remove all containers
docker rm $(docker ps -a -q)

# remove all docker images
docker rmi $(docker images -q)

# remove all docker volumes
docker volume ls -qf dangling=true | xargs -r docker volume rm

# cleanup all containers
docker system prune -a # removes everything
docker rm `docker ps --no-trunc -aq`

# remove images without tag
docker images | egrep ^'<none>' | awk '{ print $3 }' | xargs docker rmi 

################ Containers

# List containers
docker container ls

# Create a named container
docker container create --name <ContainerName> <ImageName>

# Start a container in the background

# Remove all stopped containers
docker container prune
