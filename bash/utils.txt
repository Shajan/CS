# tr: Translate one char to another
# print a sorted list of folders in your path
echo $PATH | tr ":" "\n" | sort

# cut: Get part of a string
# edit scala files that contain "foo"
vi `find . -name *.scala | xargs egrep "foo" | cut -f1 -d ":"`

# cut: Get everyting beyond ':'
cut -d ":" -f1-

#split text file into multiple
split -dl <numberoflines> <inputfile> <outputfilesuffix> 
example: split -dl 8 "ttl.snapshot/$f" "ttl.1024/$f."

# Search for 'foobar' any file in a local git repository
# using find -print0 xargs -0 takes care of spaces and other chars in filenames
# ingnoring '*.git' reduces noise/duplicates from git
find . -not -iwholename '*.git*' -type f -print0 | xargs -0 egrep foobar 

# Find all files, ignoring '.git' and 'target' folders
find . -type d -name target -prune -o -type d -name .git -prune -o -type f -name "*.scala" -print

# Redirect stderr to 'error.txt'
# stdin:0, stdout:1, stderr:2
foo 2> error.txt
# Redirect stdout and stderr to 'all.txt'
foo &> all.txt
foo &> /dev/null
# Redirect stderr to stdout
foo 2>&1
# Redirect stdout to stderr
foo 1>&2

# Append Redirect all to file
cmd >>file.txt 2>&1

#read contents of lib files (elf format)
readelf -a -W <file>
readelf -d <file> | egrep SONAME # read version if present

#find number of processors
cat /proc/cpuinfo | grep processor | wc -l

#join/combine two files line by line
paste file1.txt file2.txt > join.txt

#join two files based on field equality.
#(-1 2) second field of first file, (-2 1) first field of second file
#files have to be sorted and unique on that field
join file1.txt file2.txt -1 2 -2 1 -t"tab"

#print n'th field
cat foo.txt | awk '{print $6 }â€™

#compute average
awk '{ total += $2; count++ } END { print total/count }' 

#swap columns 1 and 2, then print the line
awk '{a=$1; $1=$2; $2=a} 1'
:%!awk '{a=$1; $1=$2; $2=a} 1' # in vi

#print just the matching part of an expression
egrep -o EXPR file

#reading file line by line
while read p; do echo $p done <fileName

#process / list each file in folder
for f in *.c; do echo "Processing $f file.."; done

#filemon equivalent for mac
sudo fs_usage

#summarize file size in folder (ls includes sparse space as well, du is actual space)
du -hs <folder>
ls -lRh <filder>

#true always set exit code 0, false sets 1, echo $? to see the code
true
echo $?
false

#double piple to execute only on fail && only on succes
false || echo "This will print"
true || echo "This won't print"
false && echo "This won't print"
true && echo "This will print"

#find only in some subfolders, example find folder named dashboards, within that folder, find files with .rb then grep
for i in `find . -name dashboards`; do echo `find $i/*.rb 2>/dev/null` | egrep dashboards | xargs egrep groupby; done

#convert case
dd if=input_file of=output_file conv=ucase
dd if=input_file of=output_file conv=lcase

#create a fixed size blank 1k file
dd if=/dev/zero of=file1 bs=1024 count=1

#modify the first 512 bytes of a file
dd if=/dev/zero of=file_to_modify bs=512 count=1 conv=notrunc

#remove pattern from beginning of string ${VARIABLE#PATTERN}
#  ${VARIABLE#PATTERN} will do the shortest match
#  ${VARIABLE##PATTERN} will do the longest match
FOO=/abc; BAR=abc; echo "Strip initial '/' if present ${FOO} => ${FOO#/}, ${BAR} => ${BAR#/}"

#find files matching an expression 
# Example: ab*d.txt or ab*d-<two digit number>.log
for f in ab*d{.txt,-[0-9][0-9].log}; do echo $f; done

#rename a set of files
for i in *.src ; do mv "$i" "$i.jpg" ; done

#find and replace filenames
for src in *.find.foo; do dst=`echo $src | sed s/find/replace/`; echo "$src --> $dst"; done 

#pad with 0
printf "%03d" 1
printf "%03d" 11

#word count
sed -e 's/ /\n/g' | sort | uniq -c | sort -n

#histogram of field #2
awk '{ n[$2]++ } END { for (i in n) print n[i],i}' | sort -n

#diff without markers -1 suppress missing first, -2 missing second, -3 suppress union
comm -13 <first> <second>

#sort files by timestamp in subfolders
find . -type f -name *.fat -printf '%T@ %p\n' | sort -k 1 -n

#substitute empty line with someting
sed -e 's/^$/foobar/' <file>

